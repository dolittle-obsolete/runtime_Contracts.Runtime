"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var system_guid_pb = require('../../system/guid_pb.js');
goog.object.extend(proto, system_guid_pb);
var Events_Relativity_interaction_event_source_version_pb = require('../../Events.Relativity/interaction/event_source_version_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_event_source_version_pb);
goog.exportSymbol('proto.dolittle.events.relativity.VersionedEventSource', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.events.relativity.VersionedEventSource = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dolittle.events.relativity.VersionedEventSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.events.relativity.VersionedEventSource.displayName = 'proto.dolittle.events.relativity.VersionedEventSource';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.events.relativity.VersionedEventSource.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.events.relativity.VersionedEventSource.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.events.relativity.VersionedEventSource} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.events.relativity.VersionedEventSource.toObject = function (includeInstance, msg) {
        var f, obj = {
            version: (f = msg.getVersion()) && Events_Relativity_interaction_event_source_version_pb.EventSourceVersion.toObject(includeInstance, f),
            eventsource: (f = msg.getEventsource()) && system_guid_pb.guid.toObject(includeInstance, f),
            artifact: (f = msg.getArtifact()) && system_guid_pb.guid.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.events.relativity.VersionedEventSource}
 */
proto.dolittle.events.relativity.VersionedEventSource.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.events.relativity.VersionedEventSource;
    return proto.dolittle.events.relativity.VersionedEventSource.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.events.relativity.VersionedEventSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.events.relativity.VersionedEventSource}
 */
proto.dolittle.events.relativity.VersionedEventSource.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new Events_Relativity_interaction_event_source_version_pb.EventSourceVersion;
                reader.readMessage(value, Events_Relativity_interaction_event_source_version_pb.EventSourceVersion.deserializeBinaryFromReader);
                msg.setVersion(value);
                break;
            case 2:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setEventsource(value);
                break;
            case 3:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setArtifact(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.events.relativity.VersionedEventSource.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.events.relativity.VersionedEventSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.events.relativity.VersionedEventSource.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getVersion();
    if (f != null) {
        writer.writeMessage(1, f, Events_Relativity_interaction_event_source_version_pb.EventSourceVersion.serializeBinaryToWriter);
    }
    f = message.getEventsource();
    if (f != null) {
        writer.writeMessage(2, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getArtifact();
    if (f != null) {
        writer.writeMessage(3, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
};
/**
 * optional EventSourceVersion version = 1;
 * @return {?proto.dolittle.events.relativity.EventSourceVersion}
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.getVersion = function () {
    return /** @type{?proto.dolittle.events.relativity.EventSourceVersion} */ (jspb.Message.getWrapperField(this, Events_Relativity_interaction_event_source_version_pb.EventSourceVersion, 1));
};
/** @param {?proto.dolittle.events.relativity.EventSourceVersion|undefined} value */
proto.dolittle.events.relativity.VersionedEventSource.prototype.setVersion = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.clearVersion = function () {
    this.setVersion(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.hasVersion = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional dolittle.guid eventSource = 2;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.getEventsource = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 2));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.VersionedEventSource.prototype.setEventsource = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.clearEventsource = function () {
    this.setEventsource(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.hasEventsource = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional dolittle.guid artifact = 3;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.getArtifact = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 3));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.VersionedEventSource.prototype.setArtifact = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.clearArtifact = function () {
    this.setArtifact(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.VersionedEventSource.prototype.hasArtifact = function () {
    return jspb.Message.getField(this, 3) != null;
};
goog.object.extend(exports, proto.dolittle.events.relativity);
//# sourceMappingURL=data:application/json;base64,