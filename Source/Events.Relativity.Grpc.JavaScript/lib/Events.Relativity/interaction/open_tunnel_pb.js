"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var system_guid_pb = require('../../system/guid_pb.js');
goog.object.extend(proto, system_guid_pb);
var Events_Relativity_interaction_artifact_pb = require('../../Events.Relativity/interaction/artifact_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_artifact_pb);
var Events_Relativity_interaction_tenant_offset_pb = require('../../Events.Relativity/interaction/tenant_offset_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_tenant_offset_pb);
goog.exportSymbol('proto.dolittle.events.relativity.OpenTunnel', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.events.relativity.OpenTunnel = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.dolittle.events.relativity.OpenTunnel.repeatedFields_, null);
};
goog.inherits(proto.dolittle.events.relativity.OpenTunnel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.events.relativity.OpenTunnel.displayName = 'proto.dolittle.events.relativity.OpenTunnel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dolittle.events.relativity.OpenTunnel.repeatedFields_ = [4, 5];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.events.relativity.OpenTunnel.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.events.relativity.OpenTunnel.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.events.relativity.OpenTunnel} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.events.relativity.OpenTunnel.toObject = function (includeInstance, msg) {
        var f, obj = {
            application: (f = msg.getApplication()) && system_guid_pb.guid.toObject(includeInstance, f),
            boundedcontext: (f = msg.getBoundedcontext()) && system_guid_pb.guid.toObject(includeInstance, f),
            clientid: (f = msg.getClientid()) && system_guid_pb.guid.toObject(includeInstance, f),
            offsetsList: jspb.Message.toObjectList(msg.getOffsetsList(), Events_Relativity_interaction_tenant_offset_pb.TenantOffset.toObject, includeInstance),
            eventsList: jspb.Message.toObjectList(msg.getEventsList(), Events_Relativity_interaction_artifact_pb.Artifact.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.events.relativity.OpenTunnel}
 */
proto.dolittle.events.relativity.OpenTunnel.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.events.relativity.OpenTunnel;
    return proto.dolittle.events.relativity.OpenTunnel.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.events.relativity.OpenTunnel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.events.relativity.OpenTunnel}
 */
proto.dolittle.events.relativity.OpenTunnel.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setApplication(value);
                break;
            case 2:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setBoundedcontext(value);
                break;
            case 3:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setClientid(value);
                break;
            case 4:
                var value = new Events_Relativity_interaction_tenant_offset_pb.TenantOffset;
                reader.readMessage(value, Events_Relativity_interaction_tenant_offset_pb.TenantOffset.deserializeBinaryFromReader);
                msg.addOffsets(value);
                break;
            case 5:
                var value = new Events_Relativity_interaction_artifact_pb.Artifact;
                reader.readMessage(value, Events_Relativity_interaction_artifact_pb.Artifact.deserializeBinaryFromReader);
                msg.addEvents(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.events.relativity.OpenTunnel.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.events.relativity.OpenTunnel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.events.relativity.OpenTunnel.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getApplication();
    if (f != null) {
        writer.writeMessage(1, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getBoundedcontext();
    if (f != null) {
        writer.writeMessage(2, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getClientid();
    if (f != null) {
        writer.writeMessage(3, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getOffsetsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(4, f, Events_Relativity_interaction_tenant_offset_pb.TenantOffset.serializeBinaryToWriter);
    }
    f = message.getEventsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(5, f, Events_Relativity_interaction_artifact_pb.Artifact.serializeBinaryToWriter);
    }
};
/**
 * optional dolittle.guid application = 1;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.getApplication = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 1));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.OpenTunnel.prototype.setApplication = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.clearApplication = function () {
    this.setApplication(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.hasApplication = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional dolittle.guid boundedContext = 2;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.getBoundedcontext = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 2));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.OpenTunnel.prototype.setBoundedcontext = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.clearBoundedcontext = function () {
    this.setBoundedcontext(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.hasBoundedcontext = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional dolittle.guid clientId = 3;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.getClientid = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 3));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.OpenTunnel.prototype.setClientid = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.clearClientid = function () {
    this.setClientid(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.hasClientid = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * repeated TenantOffset offsets = 4;
 * @return {!Array<!proto.dolittle.events.relativity.TenantOffset>}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.getOffsetsList = function () {
    return /** @type{!Array<!proto.dolittle.events.relativity.TenantOffset>} */ (jspb.Message.getRepeatedWrapperField(this, Events_Relativity_interaction_tenant_offset_pb.TenantOffset, 4));
};
/** @param {!Array<!proto.dolittle.events.relativity.TenantOffset>} value */
proto.dolittle.events.relativity.OpenTunnel.prototype.setOffsetsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 4, value);
};
/**
 * @param {!proto.dolittle.events.relativity.TenantOffset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dolittle.events.relativity.TenantOffset}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.addOffsets = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.dolittle.events.relativity.TenantOffset, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.clearOffsetsList = function () {
    this.setOffsetsList([]);
};
/**
 * repeated Artifact events = 5;
 * @return {!Array<!proto.dolittle.events.relativity.Artifact>}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.getEventsList = function () {
    return /** @type{!Array<!proto.dolittle.events.relativity.Artifact>} */ (jspb.Message.getRepeatedWrapperField(this, Events_Relativity_interaction_artifact_pb.Artifact, 5));
};
/** @param {!Array<!proto.dolittle.events.relativity.Artifact>} value */
proto.dolittle.events.relativity.OpenTunnel.prototype.setEventsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 5, value);
};
/**
 * @param {!proto.dolittle.events.relativity.Artifact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dolittle.events.relativity.Artifact}
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.addEvents = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.dolittle.events.relativity.Artifact, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 */
proto.dolittle.events.relativity.OpenTunnel.prototype.clearEventsList = function () {
    this.setEventsList([]);
};
goog.object.extend(exports, proto.dolittle.events.relativity);
//# sourceMappingURL=data:application/json;base64,