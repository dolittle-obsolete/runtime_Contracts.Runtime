"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var Events_Relativity_interaction_event_metadata_pb = require('../../Events.Relativity/interaction/event_metadata_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_event_metadata_pb);
var Events_Relativity_interaction_property_bag_pb = require('../../Events.Relativity/interaction/property_bag_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_property_bag_pb);
goog.exportSymbol('proto.dolittle.events.relativity.EventEnvelope', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.events.relativity.EventEnvelope = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dolittle.events.relativity.EventEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.events.relativity.EventEnvelope.displayName = 'proto.dolittle.events.relativity.EventEnvelope';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.events.relativity.EventEnvelope.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.events.relativity.EventEnvelope.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.events.relativity.EventEnvelope} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.events.relativity.EventEnvelope.toObject = function (includeInstance, msg) {
        var f, obj = {
            metadata: (f = msg.getMetadata()) && Events_Relativity_interaction_event_metadata_pb.EventMetadata.toObject(includeInstance, f),
            event: (f = msg.getEvent()) && Events_Relativity_interaction_property_bag_pb.PropertyBag.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.events.relativity.EventEnvelope}
 */
proto.dolittle.events.relativity.EventEnvelope.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.events.relativity.EventEnvelope;
    return proto.dolittle.events.relativity.EventEnvelope.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.events.relativity.EventEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.events.relativity.EventEnvelope}
 */
proto.dolittle.events.relativity.EventEnvelope.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new Events_Relativity_interaction_event_metadata_pb.EventMetadata;
                reader.readMessage(value, Events_Relativity_interaction_event_metadata_pb.EventMetadata.deserializeBinaryFromReader);
                msg.setMetadata(value);
                break;
            case 2:
                var value = new Events_Relativity_interaction_property_bag_pb.PropertyBag;
                reader.readMessage(value, Events_Relativity_interaction_property_bag_pb.PropertyBag.deserializeBinaryFromReader);
                msg.setEvent(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.events.relativity.EventEnvelope.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.events.relativity.EventEnvelope.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.events.relativity.EventEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.events.relativity.EventEnvelope.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMetadata();
    if (f != null) {
        writer.writeMessage(1, f, Events_Relativity_interaction_event_metadata_pb.EventMetadata.serializeBinaryToWriter);
    }
    f = message.getEvent();
    if (f != null) {
        writer.writeMessage(2, f, Events_Relativity_interaction_property_bag_pb.PropertyBag.serializeBinaryToWriter);
    }
};
/**
 * optional EventMetadata metadata = 1;
 * @return {?proto.dolittle.events.relativity.EventMetadata}
 */
proto.dolittle.events.relativity.EventEnvelope.prototype.getMetadata = function () {
    return /** @type{?proto.dolittle.events.relativity.EventMetadata} */ (jspb.Message.getWrapperField(this, Events_Relativity_interaction_event_metadata_pb.EventMetadata, 1));
};
/** @param {?proto.dolittle.events.relativity.EventMetadata|undefined} value */
proto.dolittle.events.relativity.EventEnvelope.prototype.setMetadata = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.EventEnvelope.prototype.clearMetadata = function () {
    this.setMetadata(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.EventEnvelope.prototype.hasMetadata = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional PropertyBag event = 2;
 * @return {?proto.dolittle.events.relativity.PropertyBag}
 */
proto.dolittle.events.relativity.EventEnvelope.prototype.getEvent = function () {
    return /** @type{?proto.dolittle.events.relativity.PropertyBag} */ (jspb.Message.getWrapperField(this, Events_Relativity_interaction_property_bag_pb.PropertyBag, 2));
};
/** @param {?proto.dolittle.events.relativity.PropertyBag|undefined} value */
proto.dolittle.events.relativity.EventEnvelope.prototype.setEvent = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.EventEnvelope.prototype.clearEvent = function () {
    this.setEvent(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.EventEnvelope.prototype.hasEvent = function () {
    return jspb.Message.getField(this, 2) != null;
};
goog.object.extend(exports, proto.dolittle.events.relativity);
//# sourceMappingURL=data:application/json;base64,