"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var system_guid_pb = require('../../system/guid_pb.js');
goog.object.extend(proto, system_guid_pb);
var Events_Relativity_interaction_versioned_event_source_pb = require('../../Events.Relativity/interaction/versioned_event_source_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_versioned_event_source_pb);
var Events_Relativity_interaction_event_envelope_pb = require('../../Events.Relativity/interaction/event_envelope_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_event_envelope_pb);
goog.exportSymbol('proto.dolittle.events.relativity.CommittedEventStream', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.events.relativity.CommittedEventStream = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.dolittle.events.relativity.CommittedEventStream.repeatedFields_, null);
};
goog.inherits(proto.dolittle.events.relativity.CommittedEventStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.events.relativity.CommittedEventStream.displayName = 'proto.dolittle.events.relativity.CommittedEventStream';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dolittle.events.relativity.CommittedEventStream.repeatedFields_ = [6];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.events.relativity.CommittedEventStream.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.events.relativity.CommittedEventStream.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.events.relativity.CommittedEventStream} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.events.relativity.CommittedEventStream.toObject = function (includeInstance, msg) {
        var f, obj = {
            source: (f = msg.getSource()) && Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource.toObject(includeInstance, f),
            sequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
            id: (f = msg.getId()) && system_guid_pb.guid.toObject(includeInstance, f),
            timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
            correlationid: (f = msg.getCorrelationid()) && system_guid_pb.guid.toObject(includeInstance, f),
            eventsList: jspb.Message.toObjectList(msg.getEventsList(), Events_Relativity_interaction_event_envelope_pb.EventEnvelope.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.events.relativity.CommittedEventStream}
 */
proto.dolittle.events.relativity.CommittedEventStream.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.events.relativity.CommittedEventStream;
    return proto.dolittle.events.relativity.CommittedEventStream.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.events.relativity.CommittedEventStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.events.relativity.CommittedEventStream}
 */
proto.dolittle.events.relativity.CommittedEventStream.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource;
                reader.readMessage(value, Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource.deserializeBinaryFromReader);
                msg.setSource(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setSequence(value);
                break;
            case 3:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setId(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            case 5:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setCorrelationid(value);
                break;
            case 6:
                var value = new Events_Relativity_interaction_event_envelope_pb.EventEnvelope;
                reader.readMessage(value, Events_Relativity_interaction_event_envelope_pb.EventEnvelope.deserializeBinaryFromReader);
                msg.addEvents(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.events.relativity.CommittedEventStream.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.events.relativity.CommittedEventStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.events.relativity.CommittedEventStream.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSource();
    if (f != null) {
        writer.writeMessage(1, f, Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource.serializeBinaryToWriter);
    }
    f = message.getSequence();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getId();
    if (f != null) {
        writer.writeMessage(3, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(4, f);
    }
    f = message.getCorrelationid();
    if (f != null) {
        writer.writeMessage(5, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getEventsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(6, f, Events_Relativity_interaction_event_envelope_pb.EventEnvelope.serializeBinaryToWriter);
    }
};
/**
 * optional VersionedEventSource source = 1;
 * @return {?proto.dolittle.events.relativity.VersionedEventSource}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.getSource = function () {
    return /** @type{?proto.dolittle.events.relativity.VersionedEventSource} */ (jspb.Message.getWrapperField(this, Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource, 1));
};
/** @param {?proto.dolittle.events.relativity.VersionedEventSource|undefined} value */
proto.dolittle.events.relativity.CommittedEventStream.prototype.setSource = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.clearSource = function () {
    this.setSource(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.hasSource = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional uint64 sequence = 2;
 * @return {number}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.getSequence = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.dolittle.events.relativity.CommittedEventStream.prototype.setSequence = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional dolittle.guid id = 3;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.getId = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 3));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.CommittedEventStream.prototype.setId = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.clearId = function () {
    this.setId(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.hasId = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional int64 timeStamp = 4;
 * @return {number}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/** @param {number} value */
proto.dolittle.events.relativity.CommittedEventStream.prototype.setTimestamp = function (value) {
    jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional dolittle.guid correlationId = 5;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.getCorrelationid = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 5));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.CommittedEventStream.prototype.setCorrelationid = function (value) {
    jspb.Message.setWrapperField(this, 5, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.clearCorrelationid = function () {
    this.setCorrelationid(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.hasCorrelationid = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * repeated EventEnvelope events = 6;
 * @return {!Array<!proto.dolittle.events.relativity.EventEnvelope>}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.getEventsList = function () {
    return /** @type{!Array<!proto.dolittle.events.relativity.EventEnvelope>} */ (jspb.Message.getRepeatedWrapperField(this, Events_Relativity_interaction_event_envelope_pb.EventEnvelope, 6));
};
/** @param {!Array<!proto.dolittle.events.relativity.EventEnvelope>} value */
proto.dolittle.events.relativity.CommittedEventStream.prototype.setEventsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 6, value);
};
/**
 * @param {!proto.dolittle.events.relativity.EventEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dolittle.events.relativity.EventEnvelope}
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.addEvents = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.dolittle.events.relativity.EventEnvelope, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 */
proto.dolittle.events.relativity.CommittedEventStream.prototype.clearEventsList = function () {
    this.setEventsList([]);
};
goog.object.extend(exports, proto.dolittle.events.relativity);
//# sourceMappingURL=data:application/json;base64,