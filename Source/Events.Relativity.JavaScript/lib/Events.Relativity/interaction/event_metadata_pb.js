"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var system_guid_pb = require('../../system/guid_pb.js');
goog.object.extend(proto, system_guid_pb);
var Events_Relativity_interaction_artifact_pb = require('../../Events.Relativity/interaction/artifact_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_artifact_pb);
var Events_Relativity_interaction_versioned_event_source_pb = require('../../Events.Relativity/interaction/versioned_event_source_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_versioned_event_source_pb);
var Events_Relativity_interaction_original_context_pb = require('../../Events.Relativity/interaction/original_context_pb.js');
goog.object.extend(proto, Events_Relativity_interaction_original_context_pb);
goog.exportSymbol('proto.dolittle.events.relativity.EventMetadata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.events.relativity.EventMetadata = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dolittle.events.relativity.EventMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.events.relativity.EventMetadata.displayName = 'proto.dolittle.events.relativity.EventMetadata';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.events.relativity.EventMetadata.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.events.relativity.EventMetadata.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.events.relativity.EventMetadata} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.events.relativity.EventMetadata.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventid: (f = msg.getEventid()) && system_guid_pb.guid.toObject(includeInstance, f),
            source: (f = msg.getSource()) && Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource.toObject(includeInstance, f),
            correlationid: (f = msg.getCorrelationid()) && system_guid_pb.guid.toObject(includeInstance, f),
            artifact: (f = msg.getArtifact()) && Events_Relativity_interaction_artifact_pb.Artifact.toObject(includeInstance, f),
            occurred: jspb.Message.getFieldWithDefault(msg, 5, 0),
            originalcontext: (f = msg.getOriginalcontext()) && Events_Relativity_interaction_original_context_pb.OriginalContext.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.events.relativity.EventMetadata}
 */
proto.dolittle.events.relativity.EventMetadata.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.events.relativity.EventMetadata;
    return proto.dolittle.events.relativity.EventMetadata.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.events.relativity.EventMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.events.relativity.EventMetadata}
 */
proto.dolittle.events.relativity.EventMetadata.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setEventid(value);
                break;
            case 2:
                var value = new Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource;
                reader.readMessage(value, Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource.deserializeBinaryFromReader);
                msg.setSource(value);
                break;
            case 3:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setCorrelationid(value);
                break;
            case 4:
                var value = new Events_Relativity_interaction_artifact_pb.Artifact;
                reader.readMessage(value, Events_Relativity_interaction_artifact_pb.Artifact.deserializeBinaryFromReader);
                msg.setArtifact(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setOccurred(value);
                break;
            case 6:
                var value = new Events_Relativity_interaction_original_context_pb.OriginalContext;
                reader.readMessage(value, Events_Relativity_interaction_original_context_pb.OriginalContext.deserializeBinaryFromReader);
                msg.setOriginalcontext(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.events.relativity.EventMetadata.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.events.relativity.EventMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.events.relativity.EventMetadata.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventid();
    if (f != null) {
        writer.writeMessage(1, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getSource();
    if (f != null) {
        writer.writeMessage(2, f, Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource.serializeBinaryToWriter);
    }
    f = message.getCorrelationid();
    if (f != null) {
        writer.writeMessage(3, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getArtifact();
    if (f != null) {
        writer.writeMessage(4, f, Events_Relativity_interaction_artifact_pb.Artifact.serializeBinaryToWriter);
    }
    f = message.getOccurred();
    if (f !== 0) {
        writer.writeInt64(5, f);
    }
    f = message.getOriginalcontext();
    if (f != null) {
        writer.writeMessage(6, f, Events_Relativity_interaction_original_context_pb.OriginalContext.serializeBinaryToWriter);
    }
};
/**
 * optional dolittle.guid eventId = 1;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.getEventid = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 1));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.EventMetadata.prototype.setEventid = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.EventMetadata.prototype.clearEventid = function () {
    this.setEventid(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.hasEventid = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional VersionedEventSource source = 2;
 * @return {?proto.dolittle.events.relativity.VersionedEventSource}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.getSource = function () {
    return /** @type{?proto.dolittle.events.relativity.VersionedEventSource} */ (jspb.Message.getWrapperField(this, Events_Relativity_interaction_versioned_event_source_pb.VersionedEventSource, 2));
};
/** @param {?proto.dolittle.events.relativity.VersionedEventSource|undefined} value */
proto.dolittle.events.relativity.EventMetadata.prototype.setSource = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.EventMetadata.prototype.clearSource = function () {
    this.setSource(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.hasSource = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional dolittle.guid correlationId = 3;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.getCorrelationid = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 3));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.EventMetadata.prototype.setCorrelationid = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.EventMetadata.prototype.clearCorrelationid = function () {
    this.setCorrelationid(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.hasCorrelationid = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional Artifact artifact = 4;
 * @return {?proto.dolittle.events.relativity.Artifact}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.getArtifact = function () {
    return /** @type{?proto.dolittle.events.relativity.Artifact} */ (jspb.Message.getWrapperField(this, Events_Relativity_interaction_artifact_pb.Artifact, 4));
};
/** @param {?proto.dolittle.events.relativity.Artifact|undefined} value */
proto.dolittle.events.relativity.EventMetadata.prototype.setArtifact = function (value) {
    jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.EventMetadata.prototype.clearArtifact = function () {
    this.setArtifact(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.hasArtifact = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional int64 occurred = 5;
 * @return {number}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.getOccurred = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/** @param {number} value */
proto.dolittle.events.relativity.EventMetadata.prototype.setOccurred = function (value) {
    jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional OriginalContext originalContext = 6;
 * @return {?proto.dolittle.events.relativity.OriginalContext}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.getOriginalcontext = function () {
    return /** @type{?proto.dolittle.events.relativity.OriginalContext} */ (jspb.Message.getWrapperField(this, Events_Relativity_interaction_original_context_pb.OriginalContext, 6));
};
/** @param {?proto.dolittle.events.relativity.OriginalContext|undefined} value */
proto.dolittle.events.relativity.EventMetadata.prototype.setOriginalcontext = function (value) {
    jspb.Message.setWrapperField(this, 6, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.EventMetadata.prototype.clearOriginalcontext = function () {
    this.setOriginalcontext(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.EventMetadata.prototype.hasOriginalcontext = function () {
    return jspb.Message.getField(this, 6) != null;
};
goog.object.extend(exports, proto.dolittle.events.relativity);
//# sourceMappingURL=data:application/json;base64,