"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var system_guid_pb = require('../../system/guid_pb.js');
goog.object.extend(proto, system_guid_pb);
goog.exportSymbol('proto.dolittle.events.relativity.TenantOffset', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.events.relativity.TenantOffset = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dolittle.events.relativity.TenantOffset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.events.relativity.TenantOffset.displayName = 'proto.dolittle.events.relativity.TenantOffset';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.events.relativity.TenantOffset.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.events.relativity.TenantOffset.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.events.relativity.TenantOffset} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.events.relativity.TenantOffset.toObject = function (includeInstance, msg) {
        var f, obj = {
            tenant: (f = msg.getTenant()) && system_guid_pb.guid.toObject(includeInstance, f),
            offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.events.relativity.TenantOffset}
 */
proto.dolittle.events.relativity.TenantOffset.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.events.relativity.TenantOffset;
    return proto.dolittle.events.relativity.TenantOffset.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.events.relativity.TenantOffset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.events.relativity.TenantOffset}
 */
proto.dolittle.events.relativity.TenantOffset.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new system_guid_pb.guid;
                reader.readMessage(value, system_guid_pb.guid.deserializeBinaryFromReader);
                msg.setTenant(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setOffset(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.events.relativity.TenantOffset.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.events.relativity.TenantOffset.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.events.relativity.TenantOffset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.events.relativity.TenantOffset.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTenant();
    if (f != null) {
        writer.writeMessage(1, f, system_guid_pb.guid.serializeBinaryToWriter);
    }
    f = message.getOffset();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
};
/**
 * optional dolittle.guid tenant = 1;
 * @return {?proto.dolittle.guid}
 */
proto.dolittle.events.relativity.TenantOffset.prototype.getTenant = function () {
    return /** @type{?proto.dolittle.guid} */ (jspb.Message.getWrapperField(this, system_guid_pb.guid, 1));
};
/** @param {?proto.dolittle.guid|undefined} value */
proto.dolittle.events.relativity.TenantOffset.prototype.setTenant = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.events.relativity.TenantOffset.prototype.clearTenant = function () {
    this.setTenant(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.events.relativity.TenantOffset.prototype.hasTenant = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional uint64 offset = 2;
 * @return {number}
 */
proto.dolittle.events.relativity.TenantOffset.prototype.getOffset = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.dolittle.events.relativity.TenantOffset.prototype.setOffset = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
};
goog.object.extend(exports, proto.dolittle.events.relativity);
//# sourceMappingURL=data:application/json;base64,