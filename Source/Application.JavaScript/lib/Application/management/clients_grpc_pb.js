// GENERATED CODE -- DO NOT EDIT!
// Original file comments:
// ---------------------------------------------------------------------------------------------
//  Copyright (c) Dolittle. All rights reserved.
//  Licensed under the MIT License. See LICENSE in the project root for license information.
// --------------------------------------------------------------------------------------------
'use strict';
var grpc = require('grpc');
var Application_management_clients_pb = require('../../Application/management/clients_pb.js');
var Application_client_info_pb = require('../../Application/client_info_pb.js');
function serialize_dolittle_runtime_application_management_ConnectedClientsRequest(arg) {
    if (!(arg instanceof Application_management_clients_pb.ConnectedClientsRequest)) {
        throw new Error('Expected argument of type dolittle.runtime.application.management.ConnectedClientsRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_application_management_ConnectedClientsRequest(buffer_arg) {
    return Application_management_clients_pb.ConnectedClientsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dolittle_runtime_application_management_ConnectedClientsResponse(arg) {
    if (!(arg instanceof Application_management_clients_pb.ConnectedClientsResponse)) {
        throw new Error('Expected argument of type dolittle.runtime.application.management.ConnectedClientsResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_application_management_ConnectedClientsResponse(buffer_arg) {
    return Application_management_clients_pb.ConnectedClientsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
// Represents the Client service
var ClientsService = exports.ClientsService = {
    getConnectedClients: {
        path: '/dolittle.runtime.application.management.Clients/GetConnectedClients',
        requestStream: false,
        responseStream: false,
        requestType: Application_management_clients_pb.ConnectedClientsRequest,
        responseType: Application_management_clients_pb.ConnectedClientsResponse,
        requestSerialize: serialize_dolittle_runtime_application_management_ConnectedClientsRequest,
        requestDeserialize: deserialize_dolittle_runtime_application_management_ConnectedClientsRequest,
        responseSerialize: serialize_dolittle_runtime_application_management_ConnectedClientsResponse,
        responseDeserialize: deserialize_dolittle_runtime_application_management_ConnectedClientsResponse,
    },
};
exports.ClientsClient = grpc.makeGenericClientConstructor(ClientsService);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50c19ncnBjX3BiLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJBcHBsaWNhdGlvbi9tYW5hZ2VtZW50L2NsaWVudHNfZ3JwY19wYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFFakMsMEJBQTBCO0FBQzFCLGdHQUFnRztBQUNoRyxnREFBZ0Q7QUFDaEQsNEZBQTRGO0FBQzVGLCtGQUErRjtBQUMvRixZQUFZLENBQUM7QUFDYixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxpQ0FBaUMsR0FBRyxPQUFPLENBQUMsNENBQTRDLENBQUMsQ0FBQztBQUM5RixJQUFJLDBCQUEwQixHQUFHLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0FBRWhGLFNBQVMseUVBQXlFLENBQUMsR0FBRztJQUNwRixJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksaUNBQWlDLENBQUMsdUJBQXVCLENBQUMsRUFBRTtRQUMvRSxNQUFNLElBQUksS0FBSyxDQUFDLDJGQUEyRixDQUFDLENBQUM7S0FDOUc7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELFNBQVMsMkVBQTJFLENBQUMsVUFBVTtJQUM3RixPQUFPLGlDQUFpQyxDQUFDLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDakgsQ0FBQztBQUVELFNBQVMsMEVBQTBFLENBQUMsR0FBRztJQUNyRixJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksaUNBQWlDLENBQUMsd0JBQXdCLENBQUMsRUFBRTtRQUNoRixNQUFNLElBQUksS0FBSyxDQUFDLDRGQUE0RixDQUFDLENBQUM7S0FDL0c7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELFNBQVMsNEVBQTRFLENBQUMsVUFBVTtJQUM5RixPQUFPLGlDQUFpQyxDQUFDLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDbEgsQ0FBQztBQUdELGdDQUFnQztBQUNoQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsY0FBYyxHQUFHO0lBQzVDLG1CQUFtQixFQUFFO1FBQ25CLElBQUksRUFBRSxzRUFBc0U7UUFDNUUsYUFBYSxFQUFFLEtBQUs7UUFDcEIsY0FBYyxFQUFFLEtBQUs7UUFDckIsV0FBVyxFQUFFLGlDQUFpQyxDQUFDLHVCQUF1QjtRQUN0RSxZQUFZLEVBQUUsaUNBQWlDLENBQUMsd0JBQXdCO1FBQ3hFLGdCQUFnQixFQUFFLHlFQUF5RTtRQUMzRixrQkFBa0IsRUFBRSwyRUFBMkU7UUFDL0YsaUJBQWlCLEVBQUUsMEVBQTBFO1FBQzdGLG1CQUFtQixFQUFFLDRFQUE0RTtLQUNsRztDQUNGLENBQUM7QUFFRixPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxjQUFjLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuXG4vLyBPcmlnaW5hbCBmaWxlIGNvbW1lbnRzOlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgQ29weXJpZ2h0IChjKSBEb2xpdHRsZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJ3VzZSBzdHJpY3QnO1xudmFyIGdycGMgPSByZXF1aXJlKCdncnBjJyk7XG52YXIgQXBwbGljYXRpb25fbWFuYWdlbWVudF9jbGllbnRzX3BiID0gcmVxdWlyZSgnLi4vLi4vQXBwbGljYXRpb24vbWFuYWdlbWVudC9jbGllbnRzX3BiLmpzJyk7XG52YXIgQXBwbGljYXRpb25fY2xpZW50X2luZm9fcGIgPSByZXF1aXJlKCcuLi8uLi9BcHBsaWNhdGlvbi9jbGllbnRfaW5mb19wYi5qcycpO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9hcHBsaWNhdGlvbl9tYW5hZ2VtZW50X0Nvbm5lY3RlZENsaWVudHNSZXF1ZXN0KGFyZykge1xuICBpZiAoIShhcmcgaW5zdGFuY2VvZiBBcHBsaWNhdGlvbl9tYW5hZ2VtZW50X2NsaWVudHNfcGIuQ29ubmVjdGVkQ2xpZW50c1JlcXVlc3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhcmd1bWVudCBvZiB0eXBlIGRvbGl0dGxlLnJ1bnRpbWUuYXBwbGljYXRpb24ubWFuYWdlbWVudC5Db25uZWN0ZWRDbGllbnRzUmVxdWVzdCcpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhcmcuc2VyaWFsaXplQmluYXJ5KCkpO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2FwcGxpY2F0aW9uX21hbmFnZW1lbnRfQ29ubmVjdGVkQ2xpZW50c1JlcXVlc3QoYnVmZmVyX2FyZykge1xuICByZXR1cm4gQXBwbGljYXRpb25fbWFuYWdlbWVudF9jbGllbnRzX3BiLkNvbm5lY3RlZENsaWVudHNSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcl9hcmcpKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfYXBwbGljYXRpb25fbWFuYWdlbWVudF9Db25uZWN0ZWRDbGllbnRzUmVzcG9uc2UoYXJnKSB7XG4gIGlmICghKGFyZyBpbnN0YW5jZW9mIEFwcGxpY2F0aW9uX21hbmFnZW1lbnRfY2xpZW50c19wYi5Db25uZWN0ZWRDbGllbnRzUmVzcG9uc2UpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhcmd1bWVudCBvZiB0eXBlIGRvbGl0dGxlLnJ1bnRpbWUuYXBwbGljYXRpb24ubWFuYWdlbWVudC5Db25uZWN0ZWRDbGllbnRzUmVzcG9uc2UnKTtcbiAgfVxuICByZXR1cm4gQnVmZmVyLmZyb20oYXJnLnNlcmlhbGl6ZUJpbmFyeSgpKTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9hcHBsaWNhdGlvbl9tYW5hZ2VtZW50X0Nvbm5lY3RlZENsaWVudHNSZXNwb25zZShidWZmZXJfYXJnKSB7XG4gIHJldHVybiBBcHBsaWNhdGlvbl9tYW5hZ2VtZW50X2NsaWVudHNfcGIuQ29ubmVjdGVkQ2xpZW50c1Jlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcl9hcmcpKTtcbn1cblxuXG4vLyBSZXByZXNlbnRzIHRoZSBDbGllbnQgc2VydmljZVxudmFyIENsaWVudHNTZXJ2aWNlID0gZXhwb3J0cy5DbGllbnRzU2VydmljZSA9IHtcbiAgZ2V0Q29ubmVjdGVkQ2xpZW50czoge1xuICAgIHBhdGg6ICcvZG9saXR0bGUucnVudGltZS5hcHBsaWNhdGlvbi5tYW5hZ2VtZW50LkNsaWVudHMvR2V0Q29ubmVjdGVkQ2xpZW50cycsXG4gICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgcmVzcG9uc2VTdHJlYW06IGZhbHNlLFxuICAgIHJlcXVlc3RUeXBlOiBBcHBsaWNhdGlvbl9tYW5hZ2VtZW50X2NsaWVudHNfcGIuQ29ubmVjdGVkQ2xpZW50c1JlcXVlc3QsXG4gICAgcmVzcG9uc2VUeXBlOiBBcHBsaWNhdGlvbl9tYW5hZ2VtZW50X2NsaWVudHNfcGIuQ29ubmVjdGVkQ2xpZW50c1Jlc3BvbnNlLFxuICAgIHJlcXVlc3RTZXJpYWxpemU6IHNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2FwcGxpY2F0aW9uX21hbmFnZW1lbnRfQ29ubmVjdGVkQ2xpZW50c1JlcXVlc3QsXG4gICAgcmVxdWVzdERlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2FwcGxpY2F0aW9uX21hbmFnZW1lbnRfQ29ubmVjdGVkQ2xpZW50c1JlcXVlc3QsXG4gICAgcmVzcG9uc2VTZXJpYWxpemU6IHNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2FwcGxpY2F0aW9uX21hbmFnZW1lbnRfQ29ubmVjdGVkQ2xpZW50c1Jlc3BvbnNlLFxuICAgIHJlc3BvbnNlRGVzZXJpYWxpemU6IGRlc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfYXBwbGljYXRpb25fbWFuYWdlbWVudF9Db25uZWN0ZWRDbGllbnRzUmVzcG9uc2UsXG4gIH0sXG59O1xuXG5leHBvcnRzLkNsaWVudHNDbGllbnQgPSBncnBjLm1ha2VHZW5lcmljQ2xpZW50Q29uc3RydWN0b3IoQ2xpZW50c1NlcnZpY2UpO1xuIl19