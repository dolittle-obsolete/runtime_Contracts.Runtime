// GENERATED CODE -- DO NOT EDIT!
// Original file comments:
// ---------------------------------------------------------------------------------------------
//  Copyright (c) Dolittle. All rights reserved.
//  Licensed under the MIT License. See LICENSE in the project root for license information.
// --------------------------------------------------------------------------------------------
'use strict';
var grpc = require('grpc');
var Application_server_clients_pb = require('../../Application/server/clients_pb.js');
var Application_client_info_pb = require('../../Application/client_info_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
function serialize_dolittle_runtime_application_ClientInfo(arg) {
    if (!(arg instanceof Application_client_info_pb.ClientInfo)) {
        throw new Error('Expected argument of type dolittle.runtime.application.ClientInfo');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_application_ClientInfo(buffer_arg) {
    return Application_client_info_pb.ClientInfo.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_google_protobuf_Empty(arg) {
    if (!(arg instanceof google_protobuf_empty_pb.Empty)) {
        throw new Error('Expected argument of type google.protobuf.Empty');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_google_protobuf_Empty(buffer_arg) {
    return google_protobuf_empty_pb.Empty.deserializeBinary(new Uint8Array(buffer_arg));
}
// Represents the Client service
var ClientsService = exports.ClientsService = {
    connect: {
        path: '/dolittle.runtime.application.server.Clients/Connect',
        requestStream: false,
        responseStream: true,
        requestType: Application_client_info_pb.ClientInfo,
        responseType: google_protobuf_empty_pb.Empty,
        requestSerialize: serialize_dolittle_runtime_application_ClientInfo,
        requestDeserialize: deserialize_dolittle_runtime_application_ClientInfo,
        responseSerialize: serialize_google_protobuf_Empty,
        responseDeserialize: deserialize_google_protobuf_Empty,
    },
};
exports.ClientsClient = grpc.makeGenericClientConstructor(ClientsService);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50c19ncnBjX3BiLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJBcHBsaWNhdGlvbi9zZXJ2ZXIvY2xpZW50c19ncnBjX3BiLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQywwQkFBMEI7QUFDMUIsZ0dBQWdHO0FBQ2hHLGdEQUFnRDtBQUNoRCw0RkFBNEY7QUFDNUYsK0ZBQStGO0FBQy9GLFlBQVksQ0FBQztBQUNiLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLDZCQUE2QixHQUFHLE9BQU8sQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0FBQ3RGLElBQUksMEJBQTBCLEdBQUcsT0FBTyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7QUFDaEYsSUFBSSx3QkFBd0IsR0FBRyxPQUFPLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUV0RixTQUFTLGlEQUFpRCxDQUFDLEdBQUc7SUFDNUQsSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzNELE1BQU0sSUFBSSxLQUFLLENBQUMsbUVBQW1FLENBQUMsQ0FBQztLQUN0RjtJQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsU0FBUyxtREFBbUQsQ0FBQyxVQUFVO0lBQ3JFLE9BQU8sMEJBQTBCLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDN0YsQ0FBQztBQUVELFNBQVMsK0JBQStCLENBQUMsR0FBRztJQUMxQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksd0JBQXdCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDcEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0tBQ3BFO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLGlDQUFpQyxDQUFDLFVBQVU7SUFDbkQsT0FBTyx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN0RixDQUFDO0FBR0QsZ0NBQWdDO0FBQ2hDLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxjQUFjLEdBQUc7SUFDNUMsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLHNEQUFzRDtRQUM1RCxhQUFhLEVBQUUsS0FBSztRQUNwQixjQUFjLEVBQUUsSUFBSTtRQUNwQixXQUFXLEVBQUUsMEJBQTBCLENBQUMsVUFBVTtRQUNsRCxZQUFZLEVBQUUsd0JBQXdCLENBQUMsS0FBSztRQUM1QyxnQkFBZ0IsRUFBRSxpREFBaUQ7UUFDbkUsa0JBQWtCLEVBQUUsbURBQW1EO1FBQ3ZFLGlCQUFpQixFQUFFLCtCQUErQjtRQUNsRCxtQkFBbUIsRUFBRSxpQ0FBaUM7S0FDdkQ7Q0FDRixDQUFDO0FBRUYsT0FBTyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsY0FBYyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcblxuLy8gT3JpZ2luYWwgZmlsZSBjb21tZW50czpcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gIENvcHlyaWdodCAoYykgRG9saXR0bGUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbid1c2Ugc3RyaWN0JztcbnZhciBncnBjID0gcmVxdWlyZSgnZ3JwYycpO1xudmFyIEFwcGxpY2F0aW9uX3NlcnZlcl9jbGllbnRzX3BiID0gcmVxdWlyZSgnLi4vLi4vQXBwbGljYXRpb24vc2VydmVyL2NsaWVudHNfcGIuanMnKTtcbnZhciBBcHBsaWNhdGlvbl9jbGllbnRfaW5mb19wYiA9IHJlcXVpcmUoJy4uLy4uL0FwcGxpY2F0aW9uL2NsaWVudF9pbmZvX3BiLmpzJyk7XG52YXIgZ29vZ2xlX3Byb3RvYnVmX2VtcHR5X3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmL2dvb2dsZS9wcm90b2J1Zi9lbXB0eV9wYi5qcycpO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9hcHBsaWNhdGlvbl9DbGllbnRJbmZvKGFyZykge1xuICBpZiAoIShhcmcgaW5zdGFuY2VvZiBBcHBsaWNhdGlvbl9jbGllbnRfaW5mb19wYi5DbGllbnRJbmZvKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYXJndW1lbnQgb2YgdHlwZSBkb2xpdHRsZS5ydW50aW1lLmFwcGxpY2F0aW9uLkNsaWVudEluZm8nKTtcbiAgfVxuICByZXR1cm4gQnVmZmVyLmZyb20oYXJnLnNlcmlhbGl6ZUJpbmFyeSgpKTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9hcHBsaWNhdGlvbl9DbGllbnRJbmZvKGJ1ZmZlcl9hcmcpIHtcbiAgcmV0dXJuIEFwcGxpY2F0aW9uX2NsaWVudF9pbmZvX3BiLkNsaWVudEluZm8uZGVzZXJpYWxpemVCaW5hcnkobmV3IFVpbnQ4QXJyYXkoYnVmZmVyX2FyZykpO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVfZ29vZ2xlX3Byb3RvYnVmX0VtcHR5KGFyZykge1xuICBpZiAoIShhcmcgaW5zdGFuY2VvZiBnb29nbGVfcHJvdG9idWZfZW1wdHlfcGIuRW1wdHkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhcmd1bWVudCBvZiB0eXBlIGdvb2dsZS5wcm90b2J1Zi5FbXB0eScpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhcmcuc2VyaWFsaXplQmluYXJ5KCkpO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZV9nb29nbGVfcHJvdG9idWZfRW1wdHkoYnVmZmVyX2FyZykge1xuICByZXR1cm4gZ29vZ2xlX3Byb3RvYnVmX2VtcHR5X3BiLkVtcHR5LmRlc2VyaWFsaXplQmluYXJ5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcl9hcmcpKTtcbn1cblxuXG4vLyBSZXByZXNlbnRzIHRoZSBDbGllbnQgc2VydmljZVxudmFyIENsaWVudHNTZXJ2aWNlID0gZXhwb3J0cy5DbGllbnRzU2VydmljZSA9IHtcbiAgY29ubmVjdDoge1xuICAgIHBhdGg6ICcvZG9saXR0bGUucnVudGltZS5hcHBsaWNhdGlvbi5zZXJ2ZXIuQ2xpZW50cy9Db25uZWN0JyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogdHJ1ZSxcbiAgICByZXF1ZXN0VHlwZTogQXBwbGljYXRpb25fY2xpZW50X2luZm9fcGIuQ2xpZW50SW5mbyxcbiAgICByZXNwb25zZVR5cGU6IGdvb2dsZV9wcm90b2J1Zl9lbXB0eV9wYi5FbXB0eSxcbiAgICByZXF1ZXN0U2VyaWFsaXplOiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9hcHBsaWNhdGlvbl9DbGllbnRJbmZvLFxuICAgIHJlcXVlc3REZXNlcmlhbGl6ZTogZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9hcHBsaWNhdGlvbl9DbGllbnRJbmZvLFxuICAgIHJlc3BvbnNlU2VyaWFsaXplOiBzZXJpYWxpemVfZ29vZ2xlX3Byb3RvYnVmX0VtcHR5LFxuICAgIHJlc3BvbnNlRGVzZXJpYWxpemU6IGRlc2VyaWFsaXplX2dvb2dsZV9wcm90b2J1Zl9FbXB0eSxcbiAgfSxcbn07XG5cbmV4cG9ydHMuQ2xpZW50c0NsaWVudCA9IGdycGMubWFrZUdlbmVyaWNDbGllbnRDb25zdHJ1Y3RvcihDbGllbnRzU2VydmljZSk7XG4iXX0=