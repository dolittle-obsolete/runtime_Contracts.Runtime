"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var Application_client_info_pb = require('../../Application/client_info_pb.js');
goog.object.extend(proto, Application_client_info_pb);
goog.exportSymbol('proto.dolittle.runtime.application.management.ConnectedClient', null, global);
goog.exportSymbol('proto.dolittle.runtime.application.management.ConnectedClientsRequest', null, global);
goog.exportSymbol('proto.dolittle.runtime.application.management.ConnectedClientsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.runtime.application.management.ConnectedClientsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dolittle.runtime.application.management.ConnectedClientsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.runtime.application.management.ConnectedClientsRequest.displayName = 'proto.dolittle.runtime.application.management.ConnectedClientsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.runtime.application.management.ConnectedClient = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dolittle.runtime.application.management.ConnectedClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.runtime.application.management.ConnectedClient.displayName = 'proto.dolittle.runtime.application.management.ConnectedClient';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.dolittle.runtime.application.management.ConnectedClientsResponse.repeatedFields_, null);
};
goog.inherits(proto.dolittle.runtime.application.management.ConnectedClientsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.runtime.application.management.ConnectedClientsResponse.displayName = 'proto.dolittle.runtime.application.management.ConnectedClientsResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.runtime.application.management.ConnectedClientsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.runtime.application.management.ConnectedClientsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.runtime.application.management.ConnectedClientsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.runtime.application.management.ConnectedClientsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.runtime.application.management.ConnectedClientsRequest}
 */
proto.dolittle.runtime.application.management.ConnectedClientsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.runtime.application.management.ConnectedClientsRequest;
    return proto.dolittle.runtime.application.management.ConnectedClientsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.runtime.application.management.ConnectedClientsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.runtime.application.management.ConnectedClientsRequest}
 */
proto.dolittle.runtime.application.management.ConnectedClientsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.runtime.application.management.ConnectedClientsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.runtime.application.management.ConnectedClientsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.runtime.application.management.ConnectedClientsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.runtime.application.management.ConnectedClientsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.runtime.application.management.ConnectedClient.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.runtime.application.management.ConnectedClient.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.runtime.application.management.ConnectedClient} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.runtime.application.management.ConnectedClient.toObject = function (includeInstance, msg) {
        var f, obj = {
            client: (f = msg.getClient()) && Application_client_info_pb.ClientInfo.toObject(includeInstance, f),
            connectiontime: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.runtime.application.management.ConnectedClient}
 */
proto.dolittle.runtime.application.management.ConnectedClient.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.runtime.application.management.ConnectedClient;
    return proto.dolittle.runtime.application.management.ConnectedClient.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.runtime.application.management.ConnectedClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.runtime.application.management.ConnectedClient}
 */
proto.dolittle.runtime.application.management.ConnectedClient.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new Application_client_info_pb.ClientInfo;
                reader.readMessage(value, Application_client_info_pb.ClientInfo.deserializeBinaryFromReader);
                msg.setClient(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setConnectiontime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.runtime.application.management.ConnectedClient.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.runtime.application.management.ConnectedClient.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.runtime.application.management.ConnectedClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.runtime.application.management.ConnectedClient.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getClient();
    if (f != null) {
        writer.writeMessage(1, f, Application_client_info_pb.ClientInfo.serializeBinaryToWriter);
    }
    f = message.getConnectiontime();
    if (f !== 0) {
        writer.writeInt64(2, f);
    }
};
/**
 * optional dolittle.runtime.application.ClientInfo Client = 1;
 * @return {?proto.dolittle.runtime.application.ClientInfo}
 */
proto.dolittle.runtime.application.management.ConnectedClient.prototype.getClient = function () {
    return /** @type{?proto.dolittle.runtime.application.ClientInfo} */ (jspb.Message.getWrapperField(this, Application_client_info_pb.ClientInfo, 1));
};
/** @param {?proto.dolittle.runtime.application.ClientInfo|undefined} value */
proto.dolittle.runtime.application.management.ConnectedClient.prototype.setClient = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 */
proto.dolittle.runtime.application.management.ConnectedClient.prototype.clearClient = function () {
    this.setClient(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dolittle.runtime.application.management.ConnectedClient.prototype.hasClient = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional int64 ConnectionTime = 2;
 * @return {number}
 */
proto.dolittle.runtime.application.management.ConnectedClient.prototype.getConnectiontime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.dolittle.runtime.application.management.ConnectedClient.prototype.setConnectiontime = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.runtime.application.management.ConnectedClientsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.runtime.application.management.ConnectedClientsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.runtime.application.management.ConnectedClientsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.runtime.application.management.ConnectedClientsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            clientsList: jspb.Message.toObjectList(msg.getClientsList(), proto.dolittle.runtime.application.management.ConnectedClient.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.runtime.application.management.ConnectedClientsResponse}
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.runtime.application.management.ConnectedClientsResponse;
    return proto.dolittle.runtime.application.management.ConnectedClientsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.runtime.application.management.ConnectedClientsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.runtime.application.management.ConnectedClientsResponse}
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.dolittle.runtime.application.management.ConnectedClient;
                reader.readMessage(value, proto.dolittle.runtime.application.management.ConnectedClient.deserializeBinaryFromReader);
                msg.addClients(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.runtime.application.management.ConnectedClientsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.runtime.application.management.ConnectedClientsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getClientsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.dolittle.runtime.application.management.ConnectedClient.serializeBinaryToWriter);
    }
};
/**
 * repeated ConnectedClient Clients = 1;
 * @return {!Array<!proto.dolittle.runtime.application.management.ConnectedClient>}
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.prototype.getClientsList = function () {
    return /** @type{!Array<!proto.dolittle.runtime.application.management.ConnectedClient>} */ (jspb.Message.getRepeatedWrapperField(this, proto.dolittle.runtime.application.management.ConnectedClient, 1));
};
/** @param {!Array<!proto.dolittle.runtime.application.management.ConnectedClient>} value */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.prototype.setClientsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.dolittle.runtime.application.management.ConnectedClient=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dolittle.runtime.application.management.ConnectedClient}
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.prototype.addClients = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dolittle.runtime.application.management.ConnectedClient, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 */
proto.dolittle.runtime.application.management.ConnectedClientsResponse.prototype.clearClientsList = function () {
    this.setClientsList([]);
};
goog.object.extend(exports, proto.dolittle.runtime.application.management);
//# sourceMappingURL=data:application/json;base64,